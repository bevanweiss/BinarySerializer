name: .NET Core - MultiArchs

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    # The host should always be linux
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    
    # Run steps on a matrix of arch/distro combinations
    strategy:
      matrix:
        include:
          #- arch: armv7
          #  distro: fedora_latest
          - arch: aarch64
            distro: fedora_latest
          #- arch: riscv64
          #  distro: ubuntu_latest
          - arch: s390x
            distro: fedora_latest
          #- arch: ppc64le
          #  distro: fedora_latest
            
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            --volume "${GITHUB_WORKSPACE}:/workspace"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: results-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -q -y && \
                DEBIAN_FRONTEND=noninteractive \
                apt-get install -y --no-install-recommends \
                    ca-certificates \
                    git \
                    wget \
                    libc6 \
                    libgcc1 \
                    libgssapi-krb5-2 \
                    libicu66 \
                    libssl1.1 \
                    libstdc++6 \
                    zlib1g \
                    dotnet6-sdk
                wget https://dot.net/v1/dotnet-install.sh
                chmod +x ./dotnet-install.sh
                ./dotnet-install.sh
                echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
                echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
                echo $PATH
                ;;
              fedora*)
                dnf -y update
                dnf -y install \
                    git \
                    which \
                    wget \
                    dotnet-sdk-6.0
                ;;
              alpine*)
                apk update
                apk add \
                    git \
                    wget \
                    bash \
                    icu-libs \
                    krb5-libs \
                    libgcc \
                    libintl \
                    libssl1.1 \
                    libstdc++ \
                    zlib \
                    dotnet6-sdk
                #wget https://dot.net/v1/dotnet-install.sh --no-check-certificate
                #chmod +x ./dotnet-install.sh
                #./dotnet-install.sh
                #echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
                #echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> ~/.bashrc
                #echo $PATH
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd /workspace/BinarySerializer.Test
            dotnet restore
            dotnet build --configuration Release --no-restore -f net6.0
            dotnet test --no-restore --verbosity normal 2>&1 | tee "/artifacts/${artifact_name}"
            echo "Produced artifacts in ${artifacts_dir}"

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
